{"version":3,"sources":["icomoon.js"],"names":[],"mappingsfile":"libs.js","sourcesContent":["/*!\n * @copyright Copyright (c) 2015 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.1.5\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    'use strict';\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems,\n            tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.body, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                    } catch (ignore) {}\n                };\n            } else {\n                document.body.addEventListener('DOMSubtreeModified', debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.body.removeEventListener('DOMSubtreeModified', debouncedCheck, false);\n                };\n            }\n        };\n        var xlinkNS = 'http://www.w3.org/1999/xlink';\n        checkUseElems = function () {\n            var base,\n                bcr,\n                fallback = '', // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n                hash,\n                i,\n                Request,\n                inProgressCount = 0,\n                isHidden,\n                url,\n                uses,\n                xhr;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                if (Request.withCredentials !== undefined) {\n                    Request = XMLHttpRequest;\n                } else {\n                    Request = XDomainRequest || undefined;\n                }\n            }\n            if (Request === undefined) {\n                return;\n            }\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function onload(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement('x');\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName('svg')[0];\n                    if (svg) {\n                        svg.style.position = 'absolute';\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName('use');\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                url = uses[i].getAttributeNS(xlinkNS, 'href').split('#');\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            uses[i].setAttributeNS(xlinkNS, 'xlink:href', '#' + hash);\n                        }\n                        if (xhr === undefined) {\n                            xhr = new Request();\n                            cache[base] = xhr;\n                            xhr.onload = onload(xhr);\n                            xhr.onerror = onErrorTimeout(xhr);\n                            xhr.ontimeout = onErrorTimeout(xhr);\n                            xhr.open('GET', base);\n                            xhr.send();\n                            inProgressCount += 1;\n                        }\n                    }\n                } else {\n                    // remember this URL if the use element was not empty and no request was sent\n                    if (!isHidden && cache[base] === undefined) {\n                        cache[base] = true;\n                    }\n                }\n            }\n            uses = '';\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener('load', function winLoad() {\n            window.removeEventListener('load', winLoad, false); // to prevent memory leaks\n            checkUseElems();\n        }, false);\n    }\n}());\n\n"],"sourceRoot":"/source/"}